// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitorAndAnalysisOfStaffWork;

#nullable disable

namespace MonitorAndAnalysisOfStaffWork.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.DetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор детали");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Обозначение");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Наименование");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Номер детали - артикул");

                    b.HasKey("Id");

                    b.ToTable("Details", t =>
                        {
                            t.HasComment("Деталь");
                        });
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор сотрудника");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Полное имя сотрудника");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Табельный номер сотрудника");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Должность сотрудника");

                    b.HasKey("Id");

                    b.ToTable("Employees", t =>
                        {
                            t.HasComment("Сотрудник");
                        });
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.ManufacturedDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор произведенной детали");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор детали, которая была произведена");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор сотрудника, который произвел детали");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата изготовления деталей");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Количество изготовленных деталей");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ManufacturedDetails", t =>
                        {
                            t.HasComment("Изготовленная деталь");
                        });
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.OperationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор операции");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор детали, к которой относится операция");

                    b.Property<int>("OperationTypeId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор типа операции");

                    b.Property<TimeSpan>("StandardTime")
                        .HasColumnType("time")
                        .HasComment("Стандартное время выполнения операции");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("Operations", t =>
                        {
                            t.HasComment("Операция");
                        });
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.OperationTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор типа операции");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Название операции");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор роли");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 3L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Название роли (например, Администратор, Пользователь)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Описание роли");

                    b.HasKey("Id");

                    b.ToTable("Roles", t =>
                        {
                            t.HasComment("Роль пользователя в системе");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            Title = "Администратор"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user",
                            Title = "Пользователь"
                        });
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор пользователя");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 2L);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Полное имя пользователя");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Хэш пароля пользователя");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор роли пользователя");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Имя пользователя");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", t =>
                        {
                            t.HasComment("Учетную запись пользователя");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Иванов Иван Иванович",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            RoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.WorkTimeLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор записи рабочего времени");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Дата записи рабочего времени");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор сотрудника, к которому относится запись");

                    b.Property<TimeSpan>("HoursWorked")
                        .HasColumnType("time")
                        .HasComment("Количество отработанных часов");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkTimeLogs", t =>
                        {
                            t.HasComment("Рабочее время сотрудника");
                        });
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.ManufacturedDetailEntity", b =>
                {
                    b.HasOne("MonitorAndAnalysisOfStaffWork.Entities.DetailEntity", "Detail")
                        .WithMany()
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitorAndAnalysisOfStaffWork.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.OperationEntity", b =>
                {
                    b.HasOne("MonitorAndAnalysisOfStaffWork.Entities.DetailEntity", "Detail")
                        .WithMany("Operations")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitorAndAnalysisOfStaffWork.Entities.OperationTypeEntity", "OperationType")
                        .WithMany("Operations")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("OperationType");
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.UserEntity", b =>
                {
                    b.HasOne("MonitorAndAnalysisOfStaffWork.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.WorkTimeLogEntity", b =>
                {
                    b.HasOne("MonitorAndAnalysisOfStaffWork.Entities.EmployeeEntity", "Employee")
                        .WithMany("WorkTimeLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.DetailEntity", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("WorkTimeLogs");
                });

            modelBuilder.Entity("MonitorAndAnalysisOfStaffWork.Entities.OperationTypeEntity", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
